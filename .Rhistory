seq(5,10, by=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Marwin"
Alejo
my_name <- c(my_char, "Marwin")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!",
| sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data/0
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x?
.
x[3000]
x[c(-2,-10)]
Type x[-c(2, 10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
swirl()
my_vector<-[1:20]
my_vector[1:20]
my_vector<-c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix()?
?
/
matrix(?)
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
quit()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5!=7
5NOT=7
5 NOT= 7
5 != 7
5 == 7
!5 == 7
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which()
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
test_func1()
test_func1()
test_func1()
test_func1()
boring_function <- function(x) {
x
}
boring_function <- function(x) {x}
"boring_function('My first function!')"
boring_function()
boring_function("My first function!")
"boring_function('My first function!')"
test_func1()
library(swirl)
swirl()
submit()
boring_function
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(std, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world"))
submit()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head()
head.default()
head(flag_colors(6:))
head(flag_colors
)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,
| unique)
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(pl)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(x)
head(plants)
head(plants[10?:])
head(plants[10:])
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str.default()
str()
str.default(plants)
str()
str(plants)
sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois()
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?bosplot
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
0
0
quit()
(TRUE != FALSE) == !(6 == 7)
99.99 > 100 || 45 < 7.3 || 4 != 4.0
FALSE || TRUE && FALSE
TRUE && 62 < 62 && 44 >= 44
TRUE && FALSE || 9 >= 4 && 3 < 6
!(1 >= -1)
(1:20, by = 5)
seq(1:20, 5)
seq(1, 20, length = 5)
seq(1, 20, by= 5)
seq(1:20, 5)
(1:20, by = 5)
(1:20 by = 5)
(1,20, by = 5)
(1:20, by = 5)
(1:20,5)
seq(1, 20, by= 5)
rep(0:2, each=3)
!isTRUE(8 != 5)
isTRUE(3)
isTRUE(!TRUE)
!isTRUE(4 < 3)
%muladd% <- function(left, right) { left * right + 1}
"%muladd%" <- function(left, right) { left * right + 1}
library(swirl)
swirl()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl:install_course(Getting_and_Cleaning_Data)
getwd()
swirl::install_course(Getting_and_Cleaning_Data)
library(swirl)
swirl()
swirl::
swirl::install_course("Getting and Cleaning Data")
swirl::install_course("Getting_and_Cleaning_Data")
library(swirl)
swirl()
ls
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_course("Getting and Cleaning Data")
swirl
swirl()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
Use ymd("1989 May 17")
ymd()
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(March 12, 1975)
mdy(March 12 1975)
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd(dr2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc
nyc <- now("America/New_York")
nuc
nuc
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours(17), minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arricve <- with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
mdy("June 17, 2008")
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
quit()
install.packages(reshape2)
install.packages("reshape2")
source('~/GitHub/coursera-getting-and-cleaning-data-project/run_analysis.R', echo=TRUE)
getwd()
getwd()
source('~/GitHub/coursera-getting-and-cleaning-data-project/run_analysis.R', echo=TRUE)
getwd()
setwd("C:/Users/soymarwin/Documents/GitHub/coursera-getting-and-cleaning-data-project/")
source('~/GitHub/coursera-getting-and-cleaning-data-project/run_analysis.R', echo=TRUE)
source('~/GitHub/coursera-getting-and-cleaning-data-project/run_analysis.R', echo=TRUE)
